 
cpldfit:  version P.40xd                            Xilinx Inc.
                                  Fitter Report
Design Name: gz_ppm                              Date:  7- 6-2013, 12:35PM
Device Used: XC9572XL-5-PC44
Fitting Status: Successful

*************************  Mapped Resource Summary  **************************

Macrocells     Product Terms    Function Block   Registers      Pins           
Used/Tot       Used/Tot         Inps Used/Tot    Used/Tot       Used/Tot       
52 /72  ( 72%) 226 /360  ( 63%) 91 /216 ( 42%)   51 /72  ( 71%) 15 /34  ( 44%)

** Function Block Resources **

Function    Mcells      FB Inps     Pterms      IO          
Block       Used/Tot    Used/Tot    Used/Tot    Used/Tot    
FB1          12/18       24/54       90/90*      4/ 9
FB2          15/18       23/54       44/90       2/ 9
FB3          18/18*      18/54       59/90       5/ 9
FB4           7/18       26/54       33/90       4/ 6
             -----       -----       -----      -----    
             52/72       91/216     226/360     15/33 

* - Resource is exhausted

** Global Control Resources **

Signal 'ppm_clk' mapped onto global clock net GCK1.
Global output enable net(s) unused.
Global set/reset net(s) unused.

** Pin Resources **

Signal Type    Required     Mapped  |  Pin Type            Used    Total 
------------------------------------|------------------------------------
Input         :    3           3    |  I/O              :    14      28
Output        :   11          11    |  GCK/IO           :     1       3
Bidirectional :    0           0    |  GTS/IO           :     0       2
GCK           :    1           1    |  GSR/IO           :     0       1
GTS           :    0           0    |
GSR           :    0           0    |
                 ----        ----
        Total     15          15

** Power Data **

There are 52 macrocells in high performance mode (MCHP).
There are 0 macrocells in low power mode (MCLP).
End of Mapped Resource Summary
**************************  Errors and Warnings  ***************************

WARNING:Cpld - Unable to retrieve the path to the iSE Project Repository. Will
   use the default filename of 'gz_ppm.ise'.
*************************  Summary of Mapped Logic  ************************

** 11 Outputs **

Signal                   Total Total Loc     Pin  Pin     Pin     Pwr  Slew Reg Init
Name                     Pts   Inps          No.  Type    Use     Mode Rate State
sync                     9     18    FB1_5   2    I/O     O       STD  FAST SET
pwms<2>                  3     8     FB1_15  8    I/O     O       STD  FAST RESET
pwms<5>                  3     7     FB2_2   35   I/O     O       STD  FAST RESET
pwms<7>                  3     7     FB2_8   38   I/O     O       STD  FAST RESET
pwms<0>                  4     8     FB3_2   11   I/O     O       STD  FAST RESET
pwms<1>                  3     7     FB3_8   13   I/O     O       STD  FAST RESET
pwms<3>                  3     7     FB3_11  18   I/O     O       STD  FAST RESET
pwms<4>                  3     8     FB3_14  19   I/O     O       STD  FAST RESET
pwms<6>                  3     8     FB3_17  22   I/O     O       STD  FAST RESET
ppm_int_req              1     4     FB4_2   25   I/O     O       STD  FAST 
miso                     18    22    FB4_17  34   I/O     O       STD  FAST RESET

** 41 Buried Nodes **

Signal                   Total Total Loc     Pwr  Reg Init
Name                     Pts   Inps          Mode State
inter_frame              17    18    FB1_2   STD  RESET
pulse_width_counter<6>   8     17    FB1_4   STD  RESET
pulse_width_counter<7>   9     17    FB1_7   STD  RESET
pulse_width_counter<8>   8     17    FB1_9   STD  RESET
pulse_width_counter<9>   7     17    FB1_12  STD  RESET
pulse_width_counter<5>   7     17    FB1_13  STD  RESET
pulse_width_counter<10>  6     17    FB1_14  STD  RESET
pulse_width_counter<4>   6     17    FB1_16  STD  RESET
pulse_width_counter<11>  5     17    FB1_17  STD  RESET
pulse_width_counter<3>   5     17    FB1_18  STD  RESET
reset                    2     2     FB2_5   STD  RESET
pulse_width_counter<14>  2     17    FB2_6   STD  RESET
pulse_width_counter<0>   2     17    FB2_7   STD  RESET
pulse_width_counter<1>   3     17    FB2_9   STD  RESET
pulse_width_counter<13>  3     17    FB2_10  STD  RESET
output_register<9>       3     3     FB2_11  STD  SET
output_register<8>       3     3     FB2_12  STD  SET
output_register<7>       3     3     FB2_13  STD  SET
output_register<6>       3     3     FB2_14  STD  SET
output_register<5>       3     3     FB2_15  STD  SET
output_register<4>       3     3     FB2_16  STD  SET
pulse_width_counter<2>   4     17    FB2_17  STD  RESET
pulse_width_counter<12>  4     17    FB2_18  STD  RESET
pulse_counter<2>         3     5     FB3_1   STD  RESET
pulse_counter<1>         3     4     FB3_3   STD  RESET
pulse_counter<0>         3     6     FB3_4   STD  RESET
output_register<3>       3     3     FB3_5   STD  SET
output_register<2>       3     3     FB3_6   STD  SET
output_register<1>       3     3     FB3_7   STD  SET
output_register<11>      3     3     FB3_9   STD  SET
output_register<10>      3     3     FB3_10  STD  SET
interframe_overrun       3     6     FB3_12  STD  RESET
pulse_counter<3>         4     6     FB3_13  STD  RESET
output_register<15>      4     7     FB3_15  STD  SET
output_register<14>      4     7     FB3_16  STD  SET
output_register<13>      4     7     FB3_18  STD  SET
bit_cnt<0>               2     2     FB4_11  STD  SET
output_register<0>       3     3     FB4_12  STD  SET
bit_cnt<3>               3     5     FB4_13  STD  SET
bit_cnt<2>               3     4     FB4_14  STD  SET

Signal                   Total Total Loc     Pwr  Reg Init
Name                     Pts   Inps          Mode State
bit_cnt<1>               3     3     FB4_18  STD  SET

** 4 Inputs **

Signal                   Loc     Pin  Pin     Pin     
Name                             No.  Type    Use     
ppm_in                   FB1_2   1    I/O     I
ppm_clk                  FB1_9   5~   GCK/I/O GCK
sclk                     FB4_11  28   I/O     I
sel                      FB4_15  33   I/O     I

Legend:
Pin No. - ~ - User Assigned
**************************  Function Block Details  ************************
Legend:
Total Pt     - Total product terms used by the macrocell signal
Imp Pt       - Product terms imported from other macrocells
Exp Pt       - Product terms exported to other macrocells
               in direction shown
Unused Pt    - Unused local product terms remaining in macrocell
Loc          - Location where logic was mapped in device
Pin Type/Use - I  - Input             GCK - Global Clock
               O  - Output            GTS - Global Output Enable
              (b) - Buried macrocell  GSR - Global Set/Reset
X            - Signal used as input to the macrocell logic.
Pin No.      - ~  - User Assigned
*********************************** FB1  ***********************************
Number of function block inputs used/remaining:               24/30
Number of signals used by logic mapping into function block:  24
Signal              Total   Imp   Exp Unused  Loc     Pin   Pin     Pin
Name                Pt      Pt    Pt  Pt               #    Type    Use
(unused)              0       0   \/5   0     FB1_1         (b)     (b)
inter_frame          17      12<-   0   0     FB1_2   1     I/O     I
(unused)              0       0   /\5   0     FB1_3         (b)     (b)
pulse_width_counter<6>
                      8       4<- /\1   0     FB1_4         (b)     (b)
sync                  9       8<- /\4   0     FB1_5   2     I/O     O
(unused)              0       0   /\5   0     FB1_6   3     I/O     (b)
pulse_width_counter<7>
                      9       7<- /\3   0     FB1_7         (b)     (b)
(unused)              0       0   /\5   0     FB1_8   4     I/O     (b)
pulse_width_counter<8>
                      8       5<- /\2   0     FB1_9   5     GCK/I/O GCK
(unused)              0       0   /\5   0     FB1_10        (b)     (b)
(unused)              0       0   \/5   0     FB1_11  6     GCK/I/O (b)
pulse_width_counter<9>
                      7       5<- \/3   0     FB1_12        (b)     (b)
pulse_width_counter<5>
                      7       3<- \/1   0     FB1_13        (b)     (b)
pulse_width_counter<10>
                      6       1<-   0   0     FB1_14  7     GCK/I/O (b)
pwms<2>               3       0   \/2   0     FB1_15  8     I/O     O
pulse_width_counter<4>
                      6       2<- \/1   0     FB1_16        (b)     (b)
pulse_width_counter<11>
                      5       1<- \/1   0     FB1_17  9     I/O     (b)
pulse_width_counter<3>
                      5       1<- \/1   0     FB1_18        (b)     (b)

Signals Used by Logic in Function Block
  1: inter_frame               9: pulse_width_counter<11>  17: pulse_width_counter<5> 
  2: ppm_in                   10: pulse_width_counter<12>  18: pulse_width_counter<6> 
  3: pulse_counter<0>         11: pulse_width_counter<13>  19: pulse_width_counter<7> 
  4: pulse_counter<1>         12: pulse_width_counter<14>  20: pulse_width_counter<8> 
  5: pulse_counter<2>         13: pulse_width_counter<1>   21: pulse_width_counter<9> 
  6: pulse_counter<3>         14: pulse_width_counter<2>   22: pwms<2> 
  7: pulse_width_counter<0>   15: pulse_width_counter<3>   23: reset 
  8: pulse_width_counter<10>  16: pulse_width_counter<4>   24: sync 

Signal                        1         2         3         4 FB
Name                0----+----0----+----0----+----0----+----0 Inputs
inter_frame          XX....XXXXXXXXXXXXXXX.X................. 18
pulse_width_counter<6> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
sync                 .X....XXXXXXXXXXXXXXX.XX................ 18
pulse_width_counter<7> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
pulse_width_counter<8> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
pulse_width_counter<9> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
pulse_width_counter<5> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
pulse_width_counter<10> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
pwms<2>              XXXXXX...............X.X................ 8
pulse_width_counter<4> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
pulse_width_counter<11> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
pulse_width_counter<3> 
                     .X....XXXXXXXXXXXXXXX.X................. 17
                    0----+----1----+----2----+----3----+----4
                              0         0         0         0
*********************************** FB2  ***********************************
Number of function block inputs used/remaining:               23/31
Number of signals used by logic mapping into function block:  23
Signal              Total   Imp   Exp Unused  Loc     Pin   Pin     Pin
Name                Pt      Pt    Pt  Pt               #    Type    Use
(unused)              0       0     0   5     FB2_1         (b)     
pwms<5>               3       0     0   2     FB2_2   35    I/O     O
(unused)              0       0     0   5     FB2_3         (b)     
(unused)              0       0     0   5     FB2_4         (b)     
reset                 2       0     0   3     FB2_5   36    I/O     (b)
pulse_width_counter<14>
                      2       0     0   3     FB2_6   37    I/O     (b)
pulse_width_counter<0>
                      2       0     0   3     FB2_7         (b)     (b)
pwms<7>               3       0     0   2     FB2_8   38    I/O     O
pulse_width_counter<1>
                      3       0     0   2     FB2_9   39    GSR/I/O (b)
pulse_width_counter<13>
                      3       0     0   2     FB2_10        (b)     (b)
output_register<9>    3       0     0   2     FB2_11  40    GTS/I/O (b)
output_register<8>    3       0     0   2     FB2_12        (b)     (b)
output_register<7>    3       0     0   2     FB2_13        (b)     (b)
output_register<6>    3       0     0   2     FB2_14  42    GTS/I/O (b)
output_register<5>    3       0     0   2     FB2_15  43    I/O     (b)
output_register<4>    3       0     0   2     FB2_16        (b)     (b)
pulse_width_counter<2>
                      4       0     0   1     FB2_17  44    I/O     (b)
pulse_width_counter<12>
                      4       0     0   1     FB2_18        (b)     (b)

Signals Used by Logic in Function Block
  1: inter_frame               9: pulse_width_counter<11>  17: pulse_width_counter<5> 
  2: ppm_in                   10: pulse_width_counter<12>  18: pulse_width_counter<6> 
  3: pulse_counter<0>         11: pulse_width_counter<13>  19: pulse_width_counter<7> 
  4: pulse_counter<1>         12: pulse_width_counter<14>  20: pulse_width_counter<8> 
  5: pulse_counter<2>         13: pulse_width_counter<1>   21: pulse_width_counter<9> 
  6: pulse_counter<3>         14: pulse_width_counter<2>   22: reset 
  7: pulse_width_counter<0>   15: pulse_width_counter<3>   23: sync 
  8: pulse_width_counter<10>  16: pulse_width_counter<4>  

Signal                        1         2         3         4 FB
Name                0----+----0----+----0----+----0----+----0 Inputs
pwms<5>              XXXXXX................X................. 7
reset                .X...................X.................. 2
pulse_width_counter<14> 
                     .X....XXXXXXXXXXXXXXXX.................. 17
pulse_width_counter<0> 
                     .X....XXXXXXXXXXXXXXXX.................. 17
pwms<7>              XXXXXX................X................. 7
pulse_width_counter<1> 
                     .X....XXXXXXXXXXXXXXXX.................. 17
pulse_width_counter<13> 
                     .X....XXXXXXXXXXXXXXXX.................. 17
output_register<9>   XX..................X................... 3
output_register<8>   XX.................X.................... 3
output_register<7>   XX................X..................... 3
output_register<6>   XX...............X...................... 3
output_register<5>   XX..............X....................... 3
output_register<4>   XX.............X........................ 3
pulse_width_counter<2> 
                     .X....XXXXXXXXXXXXXXXX.................. 17
pulse_width_counter<12> 
                     .X....XXXXXXXXXXXXXXXX.................. 17
                    0----+----1----+----2----+----3----+----4
                              0         0         0         0
*********************************** FB3  ***********************************
Number of function block inputs used/remaining:               18/36
Number of signals used by logic mapping into function block:  18
Signal              Total   Imp   Exp Unused  Loc     Pin   Pin     Pin
Name                Pt      Pt    Pt  Pt               #    Type    Use
pulse_counter<2>      3       0     0   2     FB3_1         (b)     (b)
pwms<0>               4       0     0   1     FB3_2   11    I/O     O
pulse_counter<1>      3       0     0   2     FB3_3         (b)     (b)
pulse_counter<0>      3       0     0   2     FB3_4         (b)     (b)
output_register<3>    3       0     0   2     FB3_5   12    I/O     (b)
output_register<2>    3       0     0   2     FB3_6         (b)     (b)
output_register<1>    3       0     0   2     FB3_7         (b)     (b)
pwms<1>               3       0     0   2     FB3_8   13    I/O     O
output_register<11>   3       0     0   2     FB3_9   14    I/O     (b)
output_register<10>   3       0     0   2     FB3_10        (b)     (b)
pwms<3>               3       0     0   2     FB3_11  18    I/O     O
interframe_overrun    3       0     0   2     FB3_12        (b)     (b)
pulse_counter<3>      4       0     0   1     FB3_13        (b)     (b)
pwms<4>               3       0     0   2     FB3_14  19    I/O     O
output_register<15>   4       0     0   1     FB3_15  20    I/O     (b)
output_register<14>   4       0     0   1     FB3_16  24    I/O     (b)
pwms<6>               3       0     0   2     FB3_17  22    I/O     O
output_register<13>   4       0     0   1     FB3_18        (b)     (b)

Signals Used by Logic in Function Block
  1: inter_frame           7: pulse_counter<1>         13: pulse_width_counter<2> 
  2: output_register<13>   8: pulse_counter<2>         14: pulse_width_counter<3> 
  3: output_register<14>   9: pulse_counter<3>         15: pwms<0> 
  4: output_register<15>  10: pulse_width_counter<10>  16: pwms<4> 
  5: ppm_in               11: pulse_width_counter<11>  17: pwms<6> 
  6: pulse_counter<0>     12: pulse_width_counter<1>   18: sync 

Signal                        1         2         3         4 FB
Name                0----+----0----+----0----+----0----+----0 Inputs
pulse_counter<2>     X...XXXX................................ 5
pwms<0>              X...XXXXX.....X..X...................... 8
pulse_counter<1>     X...XXX................................. 4
pulse_counter<0>     X...XXXXX............................... 6
output_register<3>   X...X........X.......................... 3
output_register<2>   X...X.......X........................... 3
output_register<1>   X...X......X............................ 3
pwms<1>              X...XXXXX........X...................... 7
output_register<11>  X...X.....X............................. 3
output_register<10>  X...X....X.............................. 3
pwms<3>              X...XXXXX........X...................... 7
interframe_overrun   X...XXXXX............................... 6
pulse_counter<3>     X...XXXXX............................... 6
pwms<4>              X...XXXXX......X.X...................... 8
output_register<15>  X..XXXXXX............................... 7
output_register<14>  X.X.XXXXX............................... 7
pwms<6>              X...XXXXX.......XX...................... 8
output_register<13>  XX..XXXXX............................... 7
                    0----+----1----+----2----+----3----+----4
                              0         0         0         0
*********************************** FB4  ***********************************
Number of function block inputs used/remaining:               26/28
Number of signals used by logic mapping into function block:  26
Signal              Total   Imp   Exp Unused  Loc     Pin   Pin     Pin
Name                Pt      Pt    Pt  Pt               #    Type    Use
(unused)              0       0     0   5     FB4_1         (b)     
ppm_int_req           1       0     0   4     FB4_2   25    I/O     O
(unused)              0       0     0   5     FB4_3         (b)     
(unused)              0       0     0   5     FB4_4         (b)     
(unused)              0       0     0   5     FB4_5   26    I/O     
(unused)              0       0     0   5     FB4_6         (b)     
(unused)              0       0     0   5     FB4_7         (b)     
(unused)              0       0     0   5     FB4_8   27    I/O     
(unused)              0       0     0   5     FB4_9         (b)     
(unused)              0       0     0   5     FB4_10        (b)     
bit_cnt<0>            2       0     0   3     FB4_11  28    I/O     I
output_register<0>    3       0     0   2     FB4_12        (b)     (b)
bit_cnt<3>            3       0     0   2     FB4_13        (b)     (b)
bit_cnt<2>            3       0   \/1   1     FB4_14        (b)     (b)
(unused)              0       0   \/5   0     FB4_15  33    I/O     I
(unused)              0       0   \/5   0     FB4_16        (b)     (b)
miso                 18      13<-   0   0     FB4_17  34    I/O     O
bit_cnt<1>            3       0   /\2   0     FB4_18        (b)     (b)

Signals Used by Logic in Function Block
  1: bit_cnt<0>           10: output_register<13>  19: output_register<7> 
  2: bit_cnt<1>           11: output_register<14>  20: output_register<8> 
  3: bit_cnt<2>           12: output_register<15>  21: output_register<9> 
  4: bit_cnt<3>           13: output_register<1>   22: ppm_in 
  5: inter_frame          14: output_register<2>   23: pulse_width_counter<0> 
  6: interframe_overrun   15: output_register<3>   24: sclk 
  7: output_register<0>   16: output_register<4>   25: sel 
  8: output_register<10>  17: output_register<5>   26: sync 
  9: output_register<11>  18: output_register<6>  

Signal                        1         2         3         4 FB
Name                0----+----0----+----0----+----0----+----0 Inputs
ppm_int_req          ....XX...............X...X.............. 4
bit_cnt<0>           .......................XX............... 2
output_register<0>   ....X................XX................. 3
bit_cnt<3>           XXX....................XX............... 5
bit_cnt<2>           XX.....................XX............... 4
miso                 XXXX..XXXXXXXXXXXXXXX..XXX.............. 22
bit_cnt<1>           X......................XX............... 3
                    0----+----1----+----2----+----3----+----4
                              0         0         0         0
*******************************  Equations  ********************************

********** Mapped Logic **********

















FTCPE_bit_cnt0: FTCPE port map (bit_cnt(0),'1',NOT sclk,'0',sel);

FTCPE_bit_cnt1: FTCPE port map (bit_cnt(1),bit_cnt(0),NOT sclk,'0',sel);

FTCPE_bit_cnt2: FTCPE port map (bit_cnt(2),bit_cnt_T(2),NOT sclk,'0',sel);
bit_cnt_T(2) <= (NOT bit_cnt(1) AND NOT bit_cnt(0));

FTCPE_bit_cnt3: FTCPE port map (bit_cnt(3),bit_cnt_T(3),NOT sclk,'0',sel);
bit_cnt_T(3) <= (NOT bit_cnt(2) AND NOT bit_cnt(1) AND NOT bit_cnt(0));

FDCPE_inter_frame: FDCPE port map (inter_frame,inter_frame_D,ppm_clk,'0','0');
inter_frame_D <= ((pulse_width_counter(3).EXP)
	OR (pulse_width_counter(11) AND NOT pulse_width_counter(12) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND ppm_in)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(10) AND 
	NOT pulse_width_counter(6) AND NOT pulse_width_counter(9) AND pulse_width_counter(12) AND 
	NOT pulse_width_counter(8) AND NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND 
	ppm_in)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(10) AND 
	NOT pulse_width_counter(6) AND NOT pulse_width_counter(9) AND pulse_width_counter(12) AND 
	NOT pulse_width_counter(8) AND NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND 
	reset)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(10) AND 
	NOT pulse_width_counter(7) AND NOT pulse_width_counter(9) AND pulse_width_counter(12) AND 
	NOT pulse_width_counter(8) AND NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND 
	ppm_in)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(10) AND 
	NOT pulse_width_counter(7) AND NOT pulse_width_counter(9) AND pulse_width_counter(12) AND 
	NOT pulse_width_counter(8) AND NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND 
	reset)
	OR (pulse_width_counter(6).EXP)
	OR (NOT pulse_width_counter(1) AND NOT pulse_width_counter(11) AND 
	NOT pulse_width_counter(5) AND NOT pulse_width_counter(10) AND NOT pulse_width_counter(4) AND 
	NOT pulse_width_counter(9) AND pulse_width_counter(12) AND NOT pulse_width_counter(8) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND ppm_in)
	OR (NOT pulse_width_counter(1) AND NOT pulse_width_counter(11) AND 
	NOT pulse_width_counter(5) AND NOT pulse_width_counter(10) AND NOT pulse_width_counter(4) AND 
	NOT pulse_width_counter(9) AND pulse_width_counter(12) AND NOT pulse_width_counter(8) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND reset)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(2) AND 
	NOT pulse_width_counter(5) AND NOT pulse_width_counter(10) AND NOT pulse_width_counter(4) AND 
	NOT pulse_width_counter(9) AND pulse_width_counter(12) AND NOT pulse_width_counter(8) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND ppm_in)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(2) AND 
	NOT pulse_width_counter(5) AND NOT pulse_width_counter(10) AND NOT pulse_width_counter(4) AND 
	NOT pulse_width_counter(9) AND pulse_width_counter(12) AND NOT pulse_width_counter(8) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND reset)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(3) AND 
	NOT pulse_width_counter(5) AND NOT pulse_width_counter(10) AND NOT pulse_width_counter(4) AND 
	NOT pulse_width_counter(9) AND pulse_width_counter(12) AND NOT pulse_width_counter(8) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND reset)
	OR (NOT ppm_in AND NOT inter_frame AND NOT reset)
	OR (NOT pulse_width_counter(12) AND NOT pulse_width_counter(13) AND 
	NOT pulse_width_counter(14) AND NOT inter_frame)
	OR (pulse_width_counter(11) AND NOT pulse_width_counter(12) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND reset)
	OR (pulse_width_counter(10) AND NOT pulse_width_counter(12) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND ppm_in)
	OR (pulse_width_counter(10) AND NOT pulse_width_counter(12) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND reset));

FDCPE_interframe_overrun: FDCPE port map (interframe_overrun,interframe_overrun_D,NOT ppm_in,'0','0',NOT inter_frame);
interframe_overrun_D <= (NOT pulse_counter(0) AND NOT pulse_counter(1) AND 
	NOT pulse_counter(2) AND pulse_counter(3));

FDCPE_miso: FDCPE port map (miso_I,miso,sclk,'0','0');
miso <= ((EXP12_.EXP)
	OR (sync AND bit_cnt(3) AND bit_cnt(2) AND NOT bit_cnt(1) AND 
	NOT bit_cnt(0))
	OR (bit_cnt(3) AND bit_cnt(2) AND bit_cnt(1) AND 
	NOT bit_cnt(0) AND output_register(14))
	OR (bit_cnt(3) AND NOT bit_cnt(2) AND NOT bit_cnt(1) AND 
	NOT bit_cnt(0) AND output_register(8))
	OR (NOT bit_cnt(3) AND bit_cnt(2) AND NOT bit_cnt(1) AND 
	NOT bit_cnt(0) AND output_register(4))
	OR (NOT bit_cnt(3) AND NOT bit_cnt(2) AND NOT bit_cnt(1) AND 
	NOT bit_cnt(0) AND output_register(0))
	OR (bit_cnt(3) AND NOT bit_cnt(2) AND NOT bit_cnt(1) AND 
	bit_cnt(0) AND output_register(9))
	OR (NOT bit_cnt(3) AND NOT bit_cnt(2) AND NOT bit_cnt(1) AND 
	bit_cnt(0) AND output_register(1))
	OR (bit_cnt(3) AND NOT bit_cnt(2) AND bit_cnt(1) AND 
	NOT bit_cnt(0) AND output_register(10))
	OR (NOT bit_cnt(3) AND bit_cnt(2) AND bit_cnt(1) AND 
	NOT bit_cnt(0) AND output_register(6))
	OR (NOT bit_cnt(3) AND NOT bit_cnt(2) AND bit_cnt(1) AND 
	NOT bit_cnt(0) AND output_register(2)));
miso <= miso_I when miso_OE = '1' else 'Z';
miso_OE <= NOT sel;

FDCPE_output_register0: FDCPE port map (output_register(0),pulse_width_counter(0),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register1: FDCPE port map (output_register(1),pulse_width_counter(1),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register2: FDCPE port map (output_register(2),pulse_width_counter(2),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register3: FDCPE port map (output_register(3),pulse_width_counter(3),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register4: FDCPE port map (output_register(4),pulse_width_counter(4),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register5: FDCPE port map (output_register(5),pulse_width_counter(5),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register6: FDCPE port map (output_register(6),pulse_width_counter(6),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register7: FDCPE port map (output_register(7),pulse_width_counter(7),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register8: FDCPE port map (output_register(8),pulse_width_counter(8),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register9: FDCPE port map (output_register(9),pulse_width_counter(9),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register10: FDCPE port map (output_register(10),pulse_width_counter(10),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register11: FDCPE port map (output_register(11),pulse_width_counter(11),NOT ppm_in,'0','0',NOT inter_frame);

FDCPE_output_register13: FDCPE port map (output_register(13),output_register_D(13),NOT ppm_in,'0','0');
output_register_D(13) <= ((inter_frame AND output_register(13))
	OR (NOT inter_frame AND pulse_counter(0))
	OR (output_register(13) AND NOT pulse_counter(1) AND 
	NOT pulse_counter(2) AND pulse_counter(3)));

FDCPE_output_register14: FDCPE port map (output_register(14),output_register_D(14),NOT ppm_in,'0','0');
output_register_D(14) <= ((inter_frame AND output_register(14))
	OR (NOT inter_frame AND pulse_counter(1))
	OR (output_register(14) AND NOT pulse_counter(0) AND 
	NOT pulse_counter(2) AND pulse_counter(3)));

FDCPE_output_register15: FDCPE port map (output_register(15),output_register_D(15),NOT ppm_in,'0','0');
output_register_D(15) <= ((inter_frame AND output_register(15))
	OR (NOT inter_frame AND pulse_counter(2))
	OR (output_register(15) AND NOT pulse_counter(0) AND 
	NOT pulse_counter(1) AND pulse_counter(3)));


ppm_int_req <= (NOT ppm_in AND sync AND NOT inter_frame AND 
	NOT interframe_overrun);

FTCPE_pulse_counter0: FTCPE port map (pulse_counter(0),pulse_counter_T(0),NOT ppm_in,'0','0');
pulse_counter_T(0) <= ((inter_frame AND NOT pulse_counter(0))
	OR (NOT pulse_counter(0) AND NOT pulse_counter(1) AND 
	NOT pulse_counter(2) AND pulse_counter(3)));

FDCPE_pulse_counter1: FDCPE port map (pulse_counter(1),pulse_counter_D(1),NOT ppm_in,'0','0');
pulse_counter_D(1) <= ((NOT inter_frame AND pulse_counter(0) AND 
	NOT pulse_counter(1))
	OR (NOT inter_frame AND NOT pulse_counter(0) AND 
	pulse_counter(1)));

FTCPE_pulse_counter2: FTCPE port map (pulse_counter(2),pulse_counter_T(2),NOT ppm_in,'0','0');
pulse_counter_T(2) <= ((inter_frame AND pulse_counter(2))
	OR (NOT inter_frame AND pulse_counter(0) AND 
	pulse_counter(1)));

FTCPE_pulse_counter3: FTCPE port map (pulse_counter(3),pulse_counter_T(3),NOT ppm_in,'0','0');
pulse_counter_T(3) <= ((inter_frame AND pulse_counter(3))
	OR (NOT inter_frame AND pulse_counter(0) AND 
	pulse_counter(1) AND pulse_counter(2))
	OR (NOT pulse_counter(0) AND NOT pulse_counter(1) AND 
	NOT pulse_counter(2) AND pulse_counter(3)));

FTCPE_pulse_width_counter0: FTCPE port map (pulse_width_counter(0),pulse_width_counter_T(0),ppm_clk,pulse_width_counter_CLR(0),'0');
pulse_width_counter_T(0) <= (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(12) AND pulse_width_counter(8) AND pulse_width_counter(13) AND 
	pulse_width_counter(14));
pulse_width_counter_CLR(0) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter1: FTCPE port map (pulse_width_counter(1),pulse_width_counter_T(1),ppm_clk,pulse_width_counter_CLR(1),'0');
pulse_width_counter_T(1) <= ((NOT pulse_width_counter(0))
	OR (pulse_width_counter(1) AND pulse_width_counter(11) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(9) AND pulse_width_counter(12) AND 
	pulse_width_counter(8) AND pulse_width_counter(13) AND pulse_width_counter(14)));
pulse_width_counter_CLR(1) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter2: FTCPE port map (pulse_width_counter(2),pulse_width_counter_T(2),ppm_clk,pulse_width_counter_CLR(2),'0');
pulse_width_counter_T(2) <= ((NOT pulse_width_counter(0))
	OR (NOT pulse_width_counter(1))
	OR (pulse_width_counter(11) AND pulse_width_counter(2) AND 
	pulse_width_counter(3) AND pulse_width_counter(5) AND pulse_width_counter(10) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	pulse_width_counter(9) AND pulse_width_counter(12) AND pulse_width_counter(8) AND 
	pulse_width_counter(13) AND pulse_width_counter(14)));
pulse_width_counter_CLR(2) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter3: FTCPE port map (pulse_width_counter(3),pulse_width_counter_T(3),ppm_clk,pulse_width_counter_CLR(3),'0');
pulse_width_counter_T(3) <= ((NOT pulse_width_counter(0))
	OR (NOT pulse_width_counter(1))
	OR (NOT pulse_width_counter(2))
	OR (pulse_width_counter(11) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(12) AND pulse_width_counter(8) AND pulse_width_counter(13) AND 
	pulse_width_counter(14)));
pulse_width_counter_CLR(3) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter4: FTCPE port map (pulse_width_counter(4),pulse_width_counter_T(4),ppm_clk,pulse_width_counter_CLR(4),'0');
pulse_width_counter_T(4) <= ((NOT pulse_width_counter(0))
	OR (NOT pulse_width_counter(1))
	OR (NOT pulse_width_counter(2))
	OR (NOT pulse_width_counter(3))
	OR (pulse_width_counter(11) AND pulse_width_counter(5) AND 
	pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(9) AND pulse_width_counter(12) AND 
	pulse_width_counter(8) AND pulse_width_counter(13) AND pulse_width_counter(14)));
pulse_width_counter_CLR(4) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter5: FTCPE port map (pulse_width_counter(5),pulse_width_counter_T(5),ppm_clk,pulse_width_counter_CLR(5),'0');
pulse_width_counter_T(5) <= ((NOT pulse_width_counter(0))
	OR (NOT pulse_width_counter(1))
	OR (NOT pulse_width_counter(2))
	OR (NOT pulse_width_counter(3))
	OR (NOT pulse_width_counter(4))
	OR (pulse_width_counter(11) AND pulse_width_counter(5) AND 
	pulse_width_counter(10) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	pulse_width_counter(9) AND pulse_width_counter(12) AND pulse_width_counter(8) AND 
	pulse_width_counter(13) AND pulse_width_counter(14)));
pulse_width_counter_CLR(5) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter6: FTCPE port map (pulse_width_counter(6),pulse_width_counter_T(6),ppm_clk,pulse_width_counter_CLR(6),'0');
pulse_width_counter_T(6) <= ((NOT pulse_width_counter(0))
	OR (NOT pulse_width_counter(1))
	OR (NOT pulse_width_counter(2))
	OR (NOT pulse_width_counter(3))
	OR (NOT pulse_width_counter(5))
	OR (NOT pulse_width_counter(4))
	OR (pulse_width_counter(11) AND pulse_width_counter(10) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(12) AND pulse_width_counter(8) AND pulse_width_counter(13) AND 
	pulse_width_counter(14)));
pulse_width_counter_CLR(6) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter7: FTCPE port map (pulse_width_counter(7),pulse_width_counter_T(7),ppm_clk,pulse_width_counter_CLR(7),'0');
pulse_width_counter_T(7) <= ((pulse_width_counter(8).EXP)
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	NOT pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(4) AND pulse_width_counter(6))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	NOT pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND NOT pulse_width_counter(9))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND NOT pulse_width_counter(12))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND NOT pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND NOT pulse_width_counter(7)));
pulse_width_counter_CLR(7) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter8: FTCPE port map (pulse_width_counter(8),pulse_width_counter_T(8),ppm_clk,pulse_width_counter_CLR(8),'0');
pulse_width_counter_T(8) <= ((pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	NOT pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	NOT pulse_width_counter(9))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	NOT pulse_width_counter(12))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	NOT pulse_width_counter(13))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	NOT pulse_width_counter(14))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	NOT pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	NOT pulse_width_counter(8)));
pulse_width_counter_CLR(8) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter9: FTCPE port map (pulse_width_counter(9),pulse_width_counter_T(9),ppm_clk,pulse_width_counter_CLR(9),'0');
pulse_width_counter_T(9) <= ((pulse_width_counter(0) AND pulse_width_counter(1) AND 
	NOT pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	NOT pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	NOT pulse_width_counter(12) AND pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	pulse_width_counter(8) AND NOT pulse_width_counter(13))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	pulse_width_counter(8) AND NOT pulse_width_counter(14))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	NOT pulse_width_counter(9) AND pulse_width_counter(8)));
pulse_width_counter_CLR(9) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter10: FTCPE port map (pulse_width_counter(10),pulse_width_counter_T(10),ppm_clk,pulse_width_counter_CLR(10),'0');
pulse_width_counter_T(10) <= ((pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	pulse_width_counter(9) AND pulse_width_counter(8) AND NOT pulse_width_counter(14))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	NOT pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(9) AND pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	NOT pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(9) AND pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	pulse_width_counter(9) AND NOT pulse_width_counter(12) AND pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(4) AND pulse_width_counter(6) AND pulse_width_counter(7) AND 
	pulse_width_counter(9) AND pulse_width_counter(8) AND NOT pulse_width_counter(13)));
pulse_width_counter_CLR(10) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter11: FTCPE port map (pulse_width_counter(11),pulse_width_counter_T(11),ppm_clk,pulse_width_counter_CLR(11),'0');
pulse_width_counter_T(11) <= ((pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(9) AND pulse_width_counter(8) AND 
	NOT pulse_width_counter(14))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	NOT pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(9) AND NOT pulse_width_counter(12) AND 
	pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(2) AND pulse_width_counter(3) AND pulse_width_counter(5) AND 
	pulse_width_counter(10) AND pulse_width_counter(4) AND pulse_width_counter(6) AND 
	pulse_width_counter(7) AND pulse_width_counter(9) AND pulse_width_counter(8) AND 
	NOT pulse_width_counter(13)));
pulse_width_counter_CLR(11) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter12: FTCPE port map (pulse_width_counter(12),pulse_width_counter_T(12),ppm_clk,pulse_width_counter_CLR(12),'0');
pulse_width_counter_T(12) <= ((pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	NOT pulse_width_counter(12) AND pulse_width_counter(8))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(8) AND NOT pulse_width_counter(13))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(8) AND NOT pulse_width_counter(14)));
pulse_width_counter_CLR(12) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter13: FTCPE port map (pulse_width_counter(13),pulse_width_counter_T(13),ppm_clk,pulse_width_counter_CLR(13),'0');
pulse_width_counter_T(13) <= ((pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(12) AND pulse_width_counter(8) AND NOT pulse_width_counter(13))
	OR (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(12) AND pulse_width_counter(8) AND NOT pulse_width_counter(14)));
pulse_width_counter_CLR(13) <= (NOT ppm_in AND NOT reset);

FTCPE_pulse_width_counter14: FTCPE port map (pulse_width_counter(14),pulse_width_counter_T(14),ppm_clk,pulse_width_counter_CLR(14),'0');
pulse_width_counter_T(14) <= (pulse_width_counter(0) AND pulse_width_counter(1) AND 
	pulse_width_counter(11) AND pulse_width_counter(2) AND pulse_width_counter(3) AND 
	pulse_width_counter(5) AND pulse_width_counter(10) AND pulse_width_counter(4) AND 
	pulse_width_counter(6) AND pulse_width_counter(7) AND pulse_width_counter(9) AND 
	pulse_width_counter(12) AND pulse_width_counter(8) AND pulse_width_counter(13) AND 
	NOT pulse_width_counter(14));
pulse_width_counter_CLR(14) <= (NOT ppm_in AND NOT reset);

FTCPE_pwms0: FTCPE port map (pwms(0),pwms_T(0),NOT ppm_in,'0','0');
pwms_T(0) <= ((sync AND inter_frame AND NOT pwms(0))
	OR (sync AND NOT pwms(0) AND pulse_counter(0) AND 
	pulse_counter(1) AND pulse_counter(2) AND pulse_counter(3))
	OR (sync AND NOT inter_frame AND pwms(0) AND NOT pulse_counter(0) AND 
	NOT pulse_counter(1) AND NOT pulse_counter(2) AND NOT pulse_counter(3)));

FDCPE_pwms1: FDCPE port map (pwms(1),pwms_D(1),NOT ppm_in,'0','0',pwms_CE(1));
pwms_D(1) <= (sync AND NOT pulse_counter(0) AND NOT pulse_counter(1) AND 
	NOT pulse_counter(2) AND NOT pulse_counter(3));
pwms_CE(1) <= (sync AND NOT inter_frame AND NOT pulse_counter(1) AND 
	NOT pulse_counter(2) AND NOT pulse_counter(3));

FTCPE_pwms2: FTCPE port map (pwms(2),pwms_T(2),NOT ppm_in,'0','0');
pwms_T(2) <= ((sync AND NOT inter_frame AND pwms(2) AND NOT pulse_counter(0) AND 
	pulse_counter(1) AND NOT pulse_counter(2) AND NOT pulse_counter(3))
	OR (sync AND NOT inter_frame AND NOT pwms(2) AND pulse_counter(0) AND 
	NOT pulse_counter(1) AND NOT pulse_counter(2) AND NOT pulse_counter(3)));

FDCPE_pwms3: FDCPE port map (pwms(3),pwms_D(3),NOT ppm_in,'0','0',pwms_CE(3));
pwms_D(3) <= (sync AND NOT pulse_counter(0) AND pulse_counter(1) AND 
	NOT pulse_counter(2) AND NOT pulse_counter(3));
pwms_CE(3) <= (sync AND NOT inter_frame AND pulse_counter(1) AND 
	NOT pulse_counter(2) AND NOT pulse_counter(3));

FTCPE_pwms4: FTCPE port map (pwms(4),pwms_T(4),NOT ppm_in,'0','0');
pwms_T(4) <= ((sync AND NOT inter_frame AND pwms(4) AND NOT pulse_counter(0) AND 
	NOT pulse_counter(1) AND pulse_counter(2) AND NOT pulse_counter(3))
	OR (sync AND NOT inter_frame AND NOT pwms(4) AND pulse_counter(0) AND 
	pulse_counter(1) AND NOT pulse_counter(2) AND NOT pulse_counter(3)));

FDCPE_pwms5: FDCPE port map (pwms(5),pwms_D(5),NOT ppm_in,'0','0',pwms_CE(5));
pwms_D(5) <= (sync AND NOT pulse_counter(0) AND NOT pulse_counter(1) AND 
	pulse_counter(2) AND NOT pulse_counter(3));
pwms_CE(5) <= (sync AND NOT inter_frame AND NOT pulse_counter(1) AND 
	pulse_counter(2) AND NOT pulse_counter(3));

FTCPE_pwms6: FTCPE port map (pwms(6),pwms_T(6),NOT ppm_in,'0','0');
pwms_T(6) <= ((sync AND NOT inter_frame AND pwms(6) AND NOT pulse_counter(0) AND 
	pulse_counter(1) AND pulse_counter(2) AND NOT pulse_counter(3))
	OR (sync AND NOT inter_frame AND NOT pwms(6) AND pulse_counter(0) AND 
	NOT pulse_counter(1) AND pulse_counter(2) AND NOT pulse_counter(3)));

FDCPE_pwms7: FDCPE port map (pwms(7),pwms_D(7),NOT ppm_in,'0','0',pwms_CE(7));
pwms_D(7) <= (sync AND NOT pulse_counter(0) AND pulse_counter(1) AND 
	pulse_counter(2) AND NOT pulse_counter(3));
pwms_CE(7) <= (sync AND NOT inter_frame AND pulse_counter(1) AND 
	pulse_counter(2) AND NOT pulse_counter(3));

FDCPE_reset: FDCPE port map (reset,'0',ppm_clk,'0',reset_PRE,ppm_in);
reset_PRE <= (NOT ppm_in AND NOT reset);

FDCPE_sync: FDCPE port map (sync,sync_D,ppm_clk,'0','0');
sync_D <= ((pulse_width_counter(7).EXP)
	OR (NOT pulse_width_counter(12) AND NOT pulse_width_counter(13) AND 
	NOT pulse_width_counter(14) AND NOT sync)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(10) AND 
	NOT pulse_width_counter(6) AND NOT pulse_width_counter(9) AND NOT pulse_width_counter(8) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND NOT sync)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(10) AND 
	NOT pulse_width_counter(7) AND NOT pulse_width_counter(9) AND NOT pulse_width_counter(8) AND 
	NOT pulse_width_counter(13) AND NOT pulse_width_counter(14) AND NOT sync)
	OR (NOT pulse_width_counter(1) AND NOT pulse_width_counter(11) AND 
	NOT pulse_width_counter(5) AND NOT pulse_width_counter(10) AND NOT pulse_width_counter(4) AND 
	NOT pulse_width_counter(9) AND NOT pulse_width_counter(8) AND NOT pulse_width_counter(13) AND 
	NOT pulse_width_counter(14) AND NOT sync)
	OR (NOT pulse_width_counter(11) AND NOT pulse_width_counter(2) AND 
	NOT pulse_width_counter(5) AND NOT pulse_width_counter(10) AND NOT pulse_width_counter(4) AND 
	NOT pulse_width_counter(9) AND NOT pulse_width_counter(8) AND NOT pulse_width_counter(13) AND 
	NOT pulse_width_counter(14) AND NOT sync)
	OR (NOT ppm_in AND NOT sync AND NOT reset));

Register Legend:
 FDCPE (Q,D,C,CLR,PRE,CE); 
 FTCPE (Q,D,C,CLR,PRE,CE); 
 LDCP  (Q,D,G,CLR,PRE); 

******************************  Device Pin Out *****************************

Device : XC9572XL-5-PC44


   --------------------------------  
  /6  5  4  3  2  1  44 43 42 41 40 \
 | 7                             39 | 
 | 8                             38 | 
 | 9                             37 | 
 | 10                            36 | 
 | 11        XC9572XL-5-PC44     35 | 
 | 12                            34 | 
 | 13                            33 | 
 | 14                            32 | 
 | 15                            31 | 
 | 16                            30 | 
 | 17                            29 | 
 \ 18 19 20 21 22 23 24 25 26 27 28 /
   --------------------------------  


Pin Signal                         Pin Signal                        
No. Name                           No. Name                          
  1 ppm_in                           23 GND                           
  2 sync                             24 KPR                           
  3 KPR                              25 ppm_int_req                   
  4 KPR                              26 KPR                           
  5 ppm_clk                          27 KPR                           
  6 KPR                              28 sclk                          
  7 KPR                              29 PROHIBITED                    
  8 pwms<2>                          30 TDO                           
  9 KPR                              31 GND                           
 10 GND                              32 VCC                           
 11 pwms<0>                          33 sel                           
 12 KPR                              34 miso                          
 13 pwms<1>                          35 pwms<5>                       
 14 KPR                              36 KPR                           
 15 TDI                              37 KPR                           
 16 TMS                              38 pwms<7>                       
 17 TCK                              39 KPR                           
 18 pwms<3>                          40 KPR                           
 19 pwms<4>                          41 VCC                           
 20 KPR                              42 KPR                           
 21 VCC                              43 KPR                           
 22 pwms<6>                          44 KPR                           


Legend :  NC  = Not Connected, unbonded pin
         PGND = Unused I/O configured as additional Ground pin
         TIE  = Unused I/O floating -- must tie to VCC, GND or other signal
         KPR  = Unused I/O with weak keeper (leave unconnected)
         VCC  = Dedicated Power Pin
         GND  = Dedicated Ground Pin
         TDI  = Test Data In, JTAG pin
         TDO  = Test Data Out, JTAG pin
         TCK  = Test Clock, JTAG pin
         TMS  = Test Mode Select, JTAG pin
  PROHIBITED  = User reserved pin
****************************  Compiler Options  ****************************

Following is a list of all global compiler options used by the fitter run.

Device(s) Specified                         : xc9572xl-5-PC44
Optimization Method                         : SPEED
Multi-Level Logic Optimization              : ON
Ignore Timing Specifications                : OFF
Default Register Power Up Value             : LOW
Keep User Location Constraints              : ON
What-You-See-Is-What-You-Get                : OFF
Exhaustive Fitting                          : OFF
Keep Unused Inputs                          : OFF
Slew Rate                                   : FAST
Power Mode                                  : STD
Ground on Unused IOs                        : OFF
Set I/O Pin Termination                     : KEEPER
Global Clock Optimization                   : OFF
Global Set/Reset Optimization               : OFF
Global Ouput Enable Optimization            : OFF
Input Limit                                 : 54
Pterm Limit                                 : 25
